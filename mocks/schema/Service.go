// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import io "io"
import mock "github.com/stretchr/testify/mock"
import schema "github.com/archy-bold/go-file-helper/schema"
import url "net/url"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Delete provides a mock function with given fields: fname
func (_m *Service) Delete(fname string) error {
	ret := _m.Called(fname)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(fname)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPublicURL provides a mock function with given fields: fname
func (_m *Service) GetPublicURL(fname string) (*url.URL, error) {
	ret := _m.Called(fname)

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func(string) *url.URL); ok {
		r0 = rf(fname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: fname, r, size
func (_m *Service) Store(fname string, r io.Reader, size int64) (schema.FileInfo, error) {
	ret := _m.Called(fname, r, size)

	var r0 schema.FileInfo
	if rf, ok := ret.Get(0).(func(string, io.Reader, int64) schema.FileInfo); ok {
		r0 = rf(fname, r, size)
	} else {
		r0 = ret.Get(0).(schema.FileInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, io.Reader, int64) error); ok {
		r1 = rf(fname, r, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
